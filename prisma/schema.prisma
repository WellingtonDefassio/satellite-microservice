// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SatelliteSendMessages {
  id             Int                  @id @default(autoincrement())
  payload        String
  deviceId       String
  device         Devices              @relation(fields: [deviceId], references: [deviceId])
  status         MessageStatus        @default(CREATED)
  orbcommMessage OrbcommSendMessages?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model OrbcommSendMessages {
  id            Int                   @id @default(autoincrement())
  sendMessageId Int                   @unique
  sendMessage   SatelliteSendMessages          @relation(fields: [sendMessageId], references: [id])
  deviceId      String
  device        Devices?            @relation(fields: [deviceId], references: [deviceId])       
  fwrdMessageId String
  status        OrbcommMessageStatus?
  errorId       Int?                  @default(0)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

}

model Devices {
  id               Int              @id @default(autoincrement())
  deviceId         String           @unique
  gatewayId        Int
  satelliteGateway SatelliteGateway @relation(fields: [gatewayId], references: [id])
  status           DeviceStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  messages         SatelliteSendMessages[]
  messagesOrbcomm  OrbcommSendMessages[]

}

model SatelliteGateway {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  devices Devices[]
}

model OrbcommNextMessage {
  id Int  @default(autoincrement()) @id
  previousMessage String
  nextMessage String
  createdAt DateTime @default(now())
}

model OrbcommGetMessages {
  id Int @default(autoincrement()) @id
  messageId String @unique
  messageUTC DateTime
  receiveUTC DateTime
  deviceId       String?
  SIN Int
  MIN Int
  payload String @db.MediumText
  regionName String
  otaMessageSize Int
  costumerID Int
  transport Int
  mobileOwnerID String
}

model OrbcommVersionDevice {
  id Int @default(autoincrement()) @id
  deviceId       String? @unique
  name String
  SIN Int
  MIN Int
  fields Json
  }

enum DeviceStatus {
  ACTIVE
  DISABLED
}

enum MessageStatus {
  CREATED
  SUBMITTED
  SENDED
  TIMEOUT
  FAILED
  CANCELLED
}

enum OrbcommMessageStatus {
  SUBMITTED
  RECEIVED
  ERROR
  DELIVERY_FAILED
  TIMEOUT
  CANCELLED
  WAITING
  INVALID
  TRANSMITTED
}
